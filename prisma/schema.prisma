generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                   @id @default(autoincrement())
  createdAt                DateTime              @default(now())
  name                     String?
  email                    String?               @unique
  emailVerified            DateTime?
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  healthDataPoints         HealthDataPoint[]
  workouts                 Workout[]
  dailyWorkoutSummaries    DailyWorkoutSummary[]
  dailySleepSummaries      DailySleepSummary[]
  sleepSessions            SleepSession[]
  layouts                  Layout[]
  counters                 Counter[]
  sharedLayoutsWhereMember SharedLayout[]        @relation(name: "sharedUser")
  sharedLayoutsWhereOwner  SharedLayout[]        @relation(name: "owner")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SleepSession {
  id                  Int                @id @default(autoincrement())
  user                User               @relation(fields: [userId], references: [id])
  userId              Int
  startDate           DateTime
  endDate             DateTime
  categoryValue       Int
  duration            Int
  dailySleepSummary   DailySleepSummary? @relation("SleepSessionsInSummary", fields: [dailySleepSummaryId], references: [id])
  dailySleepSummaryId Int?

  @@unique([userId, startDate, endDate])
}

model Workout {
  id                    Int                  @id @default(autoincrement())
  user                  User                 @relation(fields: [userId], references: [id])
  userId                Int
  timestamp             DateTime
  endTimestamp          DateTime?
  duration              Int
  energyBurned          Float?
  distance              Float?
  heartRateSamples      HealthDataPoint[]    @relation("WorkoutHeartRateSamples")
  type                  String
  dailyWorkoutSummary   DailyWorkoutSummary? @relation("WorkoutsInSummary", fields: [dailyWorkoutSummaryId], references: [id])
  dailyWorkoutSummaryId Int?

  @@unique([userId, timestamp])
}

model DailyWorkoutSummary {
  id                     Int               @id @default(autoincrement())
  user                   User              @relation(fields: [userId], references: [id])
  userId                 Int
  date                   DateTime
  totalWorkoutTime       Int
  energyBurned           Float?
  totalDistance          Float?
  steps                  Float?
  tts                    Float?
  atl                    Float?
  ctl                    Float?
  bodyweight             Float?
  exerciseTypes          String[]
  workouts               Workout[]         @relation("WorkoutsInSummary")
  healthDataPointMetrics HealthDataPoint[] @relation("WorkoutHealthDataPointMetrics")

  @@unique([userId, date])
}

model DailySleepSummary {
  id                     Int               @id @default(autoincrement())
  user                   User              @relation(fields: [userId], references: [id])
  userId                 Int
  date                   DateTime
  totalSleepSeconds      Int
  sleepSessions          SleepSession[]    @relation("SleepSessionsInSummary")
  healthDataPointMetrics HealthDataPoint[] @relation("SleepHealthDataPointMetrics")

  @@unique([userId, date])
}

model HealthDataPoint {
  id                    Int                  @id @default(autoincrement())
  timestamp             DateTime
  value                 Float
  category              String
  user                  User?                @relation(fields: [userId], references: [id])
  userId                Int?
  workoutId             Int?
  workout               Workout?             @relation("WorkoutHeartRateSamples", fields: [workoutId], references: [id])
  dailyWorkoutSummaryId Int?
  dailyWorkoutSummary   DailyWorkoutSummary? @relation("WorkoutHealthDataPointMetrics", fields: [dailyWorkoutSummaryId], references: [id])
  dailySleepSummaryId   Int?
  dailySleepSummary     DailySleepSummary?   @relation("SleepHealthDataPointMetrics", fields: [dailySleepSummaryId], references: [id])

  @@unique([userId, timestamp, category])
  @@index([userId, category])
}

model Layout {
  id            String         @id @default(uuid())
  userId        Int
  widgets       Json[]
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  sharedLayouts SharedLayout[]
}

model Counter {
  id     Int    @id @default(autoincrement())
  userId Int
  name   String
  value  Int
  user   User   @relation(fields: [userId], references: [id])
}

enum PermissionType {
  READ
  WRITE
}

model SharedLayout {
  id           Int                     @id @default(autoincrement())
  layout       Layout                  @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  layoutId     String
  owner        User                    @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      Int
  sharedUser   User                    @relation(name: "sharedUser", fields: [sharedUserId], references: [id], onDelete: Cascade)
  sharedUserId Int
  token        String                  @unique
  expires      DateTime? // null for no expiration
  dataScopes   SharedLayoutDataScope[]
}

model SharedLayoutDataScope {
  id             Int              @id @default(autoincrement())
  sharedLayout   SharedLayout     @relation(fields: [sharedLayoutId], references: [id], onDelete: Cascade)
  sharedLayoutId Int
  // e.g. "Counter", "Workout", "SleepSession", etc.
  resourceType   String
  // If you want to share *all* counters: resourceId = null
  // If only specific counters: resourceId = the counter.id
  resourceId     Int?
  permissions    PermissionType[]

  @@index([sharedLayoutId, resourceType, resourceId])
}
